#Copyright Michael Morrell & Linda Stals 2014


#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.


## This program uses inputs generated by 
# MESA http://mesa.sourceforge.net/ 
#Bill Paxton, Lars Bildsten, Aaron Dotter, Falk Herwig, Pierre Lesaffre, and Frank Timmes. Modules for experiments in stellar astrophysics (mesa). The Astrophysical Journal Supplement Series, 192(1):3, 2011. 3, 4, 5, 10, 11, 13, 18, 19, 22
#Bill Paxton, Matteo Cantiello, Phil Arras, Lars Bildsten, Edward F Brown, Aaron Dotter, Christopher Mankovich, MH Montgomery, Dennis Stello, FX Timmes, et al. Modules for experiments in stellar astrophysics (mesa): Giant planets, oscillations, rotation, and massive stars. The Astrophysical Journal Supplement, Volume 208, Issue 1, article id. 4, 42 pp. (2013)
# and opacity tables from OPAL http://opalopacity.llnl.gov/
# Forrest J Rogers, Fritz J Swenson, and Carlos A Iglesias. Opal equation- of-state tables for astrophysical applications. The Astrophysical Journal, 456:902, 1996. 3, 4, 24



###############    Main Code  ###########


## This file takes the solar functions, boundary values and grid from solar_equn4 and solves the related boundary value problem. B must be set to avoid zones that this solve cannot handle, generally near the surface.


#Import equations
from solar_equn4 import solar_function, solar_function_derivative
#Import boundaries
from solar_equn4 import solar_boundary_conditions, solar_set_range
#Import guess
from solar_equn4 import solar_mass_range, solar_grid, solar_soln_guess
#Mesa Data
from MESA import extract_MESA_values, Tsun, Psun, Msun, Rsun, Lsun
#plotting
from solar_plot import plot_solar_test4, plot_soln
#Solver
import scikits.bvp_solver
#normal libraries
from scipy.interpolate import splrep, splev
from pylab import *
import numpy

#define problem and solve the BVP
def solve_BVP(grid, guess, range):

    #set up problem
    problem = scikits.bvp_solver.ProblemDefinition(num_ODE = 4,
                                          num_parameters = 0,
                                          num_left_boundary_conditions = 2,
                                          boundary_points = range,
                                          function = solar_function,
                                          function_derivative = solar_function_derivative,
                                          boundary_conditions = solar_boundary_conditions)
                                          

     #solve system
    solution = scikits.bvp_solver.solve(problem,solution_guess = guess,
                                    initial_mesh = grid, trace=1,method= 4,
                                    max_subintervals = 100000,tolerance = 1.0e-3)
    return solution
                                       


a=0
b=1100 #sun=1100, Young1m=350 3m=450 7m=400 10m=450
#define initial guess and boundaries
solar_set_range(a, b)
M = solar_grid()
guess = solar_soln_guess()
range=solar_mass_range()
#run solver
solution = solve_BVP(M, guess,range)
#rename output
M = solution.mesh
S = solution.solution 
R = S[0]
L = S[1]
P = S[2]
T = S[3]                          


 #plotting stuff probably changes still will document later.                                     
#plot_soln(M, R, L, P, T,a,b)
#plot_solar_test4()

